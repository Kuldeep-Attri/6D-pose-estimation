This is the vision problem of 6d pose estimation using the 2D images.

EACH FILES & FOLDERS:
	
	FOLDERS:

		'25_calib_images' -- These are the 25 images I collected using a 6*9 chessboard for camera calibration
		'markers' -- Stores 4x4_50 markers generated by the python script pose_estimation.py
		'object_images' -- contains 2D images of object with markers that we will use for the 6D pose estimation


	FILES:
		
		'aruco_corner_world_coord.txt' -- This is the 3D coordinates of the aruco corners in the world coordinate system 'aruco_id corner_num X Y Z' (X, Y, Z in meters). I used for markers and so total 16 corners(first line).
		'camera_calib.py' -- This is a python script that calibrates the camera, this reads the images from '25_calib_images' and it returns and 'Camera Matrix' and 'Distortion Coefficients' and stores them into 'camera_matrix.txt' and 'distortion_coef.txt' files.
		'6dpose_estimation.py' -- This takes input from the camera_calib.py for 'Camera Matrix' and the 'Distortion Coefficients' and reads 2D images from the 'object_images' folder and estimates the 6D pose(both rotation matrix & translational vector).
		'Detected_ids_3D_2D.txt' -- This file contain the mapping of 3D points(world_coordinates) to 2D points(in image pixel).



USAGE:


	python3 6dpose_estimation.py --do_calibaration(only if want to calibrate camera) --done_calibration(only if calibration done and values stored txt) --images_path 'path_to_2D_image_folder'


	E.g. -- 'python3 6dpose_estimation.py --done_calibration --images_path --images_path object_images/' 



METHODS & STEPS:

	CAMERA_CALIBRARION:

		STEP1: Get a chessboard image(I use 6*9) and measure the length of the sqaure edge of the board with a ruler(please be more accurate if you can). 
		STEP2: Then use this to get the chessboard corner in the world coordinate.(3D points with z=0) 
		STEP3: Use inbuilt aruco function to get corners position in the images.(2D points)
		STEP4: Load images from '25_calib_images'(Note: I am using 25 images we can use more for better calibration results) 
		STEP5: Call cv2.calibrateCamera to generate the 'Camera Matrix' & 'Distortion Coefficients'.

	6D_POSE_ESTIMATION:	
	
		I use ArucoMarkers (dict -- 4x4_50) for the pose estimation.
		STEP1: Paste the aruco markers on an object and define a world axis system
		STEP2: Create a file that contains the information about the corners of marker in 3D coordinates in world space
		STEP3: Get the 2D points in image for each corners by using aruco inbulit functions.
		STEP4: Do 3D-2D correspondence using solvePnP:
			for this provide information from camera_calib.py and the 3D coordinates in the world of the corner along with the coordinates in 2D image.
			This will return the Rotaiton_Vector and Translation_Vector that will transform the 3D world coordinate system to the 3d camera coordinate system.
		STESP: These information can be used for the 6D pose estimation.




